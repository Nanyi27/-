**题目链接：**[852. 山脉数组的峰顶索引](https://leetcode.cn/problems/peak-index-in-a-mountain-array/)

**题目描述：**

> 给定一个长度为 `n` 的整数 **山脉** 数组 `arr` ，其中的值递增到一个 **峰值元素** 然后递减。
>
> 返回峰值元素的下标。
>
> 你必须设计并实现时间复杂度为 `O(log(n))` 的解决方案。
>
> 
>
> **示例 1：**
>
> ```
> 输入：arr = [0,1,0]
> 输出：1
> ```
>
> **示例 2：**
>
> ```
> 输入：arr = [0,2,1,0]
> 输出：1
> ```
>
> **示例 3：**
>
> ```
> 输入：arr = [0,10,5,2]
> 输出：1
> ```
>
> **提示：**
>
> - `3 <= arr.length <= 105`
> - `0 <= arr[i] <= 106`
> - 题目数据 **保证** `arr` 是一个山脉数组

**解法一（暴力查找）：**

**算法思路：**

​	◦ 峰顶的特点：比两侧的元素都要大。

​	◦ 因此，我们可以遍历数组内的每一个元素，找到某一个元素比两边的元素大即可。
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        for(int i = 1 ; i < arr.size()-1; i++){
            // 遍历数组内每一个元素，直到找到峰顶
            if(arr[i] > arr[i-1] && arr[i] > arr[i+1])
            return i;
        }

        // 为了处理oj需要控制所有路径都有返回值
        return -1;
    }
};
**解法二（二分查找）：**

**算法思路：**

​	本题的数组不是有序数组，但我们依然可以使用二分查找，原因是因为我们发现了**“二段性”**，对于山峰来说，我们会发现封顶的值是最大，对于封顶左边来说，后一个数比前一个数大；对于封顶右边来说，后一个数比前一个数小，因此我们可以分以下三种情况：

​	◦ 如果 mid 位置呈现上升趋势，说明我们接下来要在 [mid + 1, right] 区间继续搜索；

​	◦ 如果 mid 位置呈现下降趋势，说明我们接下来要在 [left, mid - 1] 区间搜索；

​	◦ 如果 mid 位置就是山峰，直接返回结果。
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int left = 0, right = arr.size()-1;
        while(left < right){
            int mid = left + (right - left) / 2;
            if(arr[mid] < arr[mid+1])
                left = mid + 1;
            else
                right = mid ;
        }
        return left;
    }
};
