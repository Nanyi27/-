**题目链接：**https://leetcode.cn/problems/substring-with-concatenation-of-all-words/

题目描述：

给定一个字符串 `s` 和一个字符串数组 `words`**。** `words` 中所有字符串 **长度相同**。

 `s` 中的 **串联子串** 是指一个包含 `words` 中所有字符串以任意顺序排列连接起来的子串。

- 例如，如果 `words = ["ab","cd","ef"]`， 那么 `"abcdef"`， `"abefcd"`，`"cdabef"`， `"cdefab"`，`"efabcd"`， 和 `"efcdab"` 都是串联子串。 `"acdbef"` 不是串联子串，因为他不是任何 `words` 排列的连接。

返回所有串联子串在 `s` 中的开始索引。你可以以 **任意顺序** 返回答案。

 

**示例 1：**

```
输入：s = "barfoothefoobarman", words = ["foo","bar"]
输出：[0,9]
解释：因为 words.length == 2 同时 words[i].length == 3，连接的子字符串的长度必须为 6。
子串 "barfoo" 开始位置是 0。它是 words 中以 ["bar","foo"] 顺序排列的连接。
子串 "foobar" 开始位置是 9。它是 words 中以 ["foo","bar"] 顺序排列的连接。
输出顺序无关紧要。返回 [9,0] 也是可以的。
```

**示例 2：**

```
输入：s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]
输出：[]
解释：因为 words.length == 4 并且 words[i].length == 4，所以串联子串的长度必须为 16。
s 中没有子串长度为 16 并且等于 words 的任何顺序排列的连接。
所以我们返回一个空数组。
```

**示例 3：**

```
输入：s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]
输出：[6,9,12]
解释：因为 words.length == 3 并且 words[i].length == 3，所以串联子串的长度必须为 9。
子串 "foobarthe" 开始位置是 6。它是 words 中以 ["foo","bar","the"] 顺序排列的连接。
子串 "barthefoo" 开始位置是 9。它是 words 中以 ["bar","the","foo"] 顺序排列的连接。
子串 "thefoobar" 开始位置是 12。它是 words 中以 ["the","foo","bar"] 顺序排列的连接。
```

 

**
**提示：**

- `1 <= s.length <= 104`
- `1 <= words.length <= 5000`
- `1 <= words[i].length <= 30`
- `words[i]` 和 `s` 由小写英文字母组成

**解法：（滑动窗口+哈希表）**

**算法思路：**

​	如果我们把每一个单词看成一个一个字符，问题就变成了找到「字符串中所有的字母异位词」。无非就是之前处理的对象是一个一个的字符，我们这里处理的对象是一个一个的单词。
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        unordered_map<string,int> hash1;//保存words里单词的频次
        for(auto& s: words) hash1[s]++;
        vector<int> ret;

        int len = words[0].size(),m = words.size();
        for(int i = 0; i < len ; i++){
            unordered_map<string,int> hash2;//维护窗口内单词频次
            for(int left = i, right = i, count = 0; right + len <= s.size();right += len){
            //进窗口 + 维护
            string in = s.substr(right, len);
            hash2[in]++;
            if(hash1.count(in) && hash2[in] <= hash1[in]) count++;
            //判断
            if(right - left + 1 > len * m){
                //出窗口 + 维护count
                string out = s.substr(left ,len);
                if(hash1.count(out) && hash2[out] <= hash1[out]) count--;
                hash2[out]--;
                left += len;
            }

            //更新结果
            if(count == m){
                ret.push_back(left);
            }
    
        }
        }
        return ret;
    }
};
**代码能力：**

​	1️⃣ 熟悉哈希表，string容器的使用以及方法
