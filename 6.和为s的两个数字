**题目链接：**[剑指offer 57.和为s的两个数字](https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/)

**题目描述：**

> 购物车内的商品价格按照升序记录于数组 price。请在购物车中找到两个商品的价格总和刚好是 target。若存在多种情况，返回任一结果即可。
>
> **示例 1：**
>
> 输入：price = [3, 9, 12, 15], target = 18
> 输出：[3,15] 或者 [15,3]
>
> **示例 2：**
>
> 输入：price = [8, 21, 27, 34, 52, 66], target = 61
> 输出：[27,34] 或者 [34,27]

### **解法一：（暴力解法，会超时）：**

**算法思路：**

两层for循环：

·外层 for 循环依次枚举第一个数a；

·内层 for 循环依次枚举第二个数b，让它与a匹配；

ps：这里有个细节；我们挑选第二个数的时候，可以不从第一个数开始选，因为a前面的数我们都已经在之前考虑过了；因此，我们可以从a往后的数开始列举。

·然后将挑选的两个数相加，判断是否符合目标值。

**算法代码：**

```cpp
class Solution {
public:
    vector<int> twoSum(vector<int>& price, int target) {
    int n = price.size();
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                if(price[i] + price[j] == target){
                    return {price[i],price[j]};
                }
            }
    }
    return {-1,-1};
    }
};
```

### 解法二（双指针-对撞指针）：

**算法思路：**

注意到本题是升序的数组，因此可以用「对撞指针」优化时间复杂度。

**算法流程：**

因为本题是有序数组，由前几题经验可得我们可以使用单调性解决此题；

如果 price[left] + price [right] > target

那么 target就在两个数之间数的和（或者没有） 所以把大的变小 即右指针移动

如果 price[left] + price [right] < target

那么 target就在两个数之间数的和 （或者没有）所以把小的变大 即左指针移动

```cpp
class Solution {
public:
    vector<int> twoSum(vector<int>& price, int target) {
        int n = price.size();

        int left = 0;
        int right = n -1;
        while(left < right){
            if(price[left] + price[right] < target){
                left++;
            }
            if(price[left] + price[right] > target){
                right--;
            }
            if(price[left] + price[right] == target){

                return {price[left],price[right]};
            }
        }
        
        return {-1,-1};
    }
};
```

## 
