**题目链接：**[15.三数之和](https://leetcode.cn/problems/3sum/)

**题目描述：**

> 给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请
>
> 你返回所有和为 0 且不重复的三元组。
>
> **注意：**答案中不可以包含重复的三元组。
>
> **示例 1：**
>
> 输入：nums = [-1,0,1,2,-1,-4]
> 输出：[[-1,-1,2],[-1,0,1]]
> 解释：
> nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。
> nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。
> nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。
> 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。
> 注意，输出的顺序和三元组的顺序并不重要。
>
> **示例 2：**
>
> 输入：nums = [0,1,1]
> 输出：[]
> 解释：唯一可能的三元组和不为 0 。
>
> **示例 3：**
>
> 输入：nums = [0,0,0]
> 输出：[[0,0,0]]
> 解释：唯一可能的三元组和为 0 。
>
> **提示：**
>
> - 3 <= nums.length <= 3000
> - -105 <= nums[i] <= 105

**解法一：暴力解决**

利用排序+暴力枚举+利用set去重进行解决，这里就不演示了

**解法二：排序+双指针**

本题是三数之和，我们可以结合两数之和的思路来解本题

两数之和思路是定义左右指针，找到两个数相加和为0

那么三数之和就是固定一个数，找到两个数相加等于固定这个数的相反数，于是三数之和🟰0；所以本题思路就有了

1️⃣ 先对数组进行排序

2️⃣ 固定一个数 a

3️⃣ 在这个数后面的区间内，使用「双指针算法」快速找到两个数之和等于 -a 即可

但需要注意的是，这道题里面需要有「去重」操作

（1）找到一个结果之后，left 和 right 指针要「跳过重复」的元素；

（2）当使用完一次双指针算法之后，固定的 a 也要「跳过重复」的元素；

**C++算法代码：**

```cpp
class Solution {
public:
vector<vector<int>> threeSum(vector<int>& nums) {
    vector<vector<int>> vv;
    int n = nums.size();
    //对数组进行排序
    sort(nums.begin(),nums.end());
    for(int i = 0;i < n;){//固定一个数
        //正数不用比较，这里是一个小优化
        //如果a是正数，那么a后面的数没有两数之和为负数
        if(nums[i] > 0) break;

        int target = -nums[i];
        int left = i+1;
        int right = n-1;

        while(left < right){
            int sum = nums[left] + nums[right];
            if(sum < target) left++;
            else if(sum > target) right--;
            else {
                vv.push_back({nums[i],nums[left],nums[right]});
                left++;
                right--;
                //去重
                while(left<right && nums[left] == nums[left-1])
                    left++;

                while(left<right && nums[right] == nums[right+1] ) right--;

            }
        }
        //去重
        i++;
        while(i < n-2 && nums[i] == nums[i-1]) i++;

    }
    return vv;
}

};
```

## 
