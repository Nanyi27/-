# 三、二分

## 二分查找算法简介

1️⃣ 特点：最恶心，细节最多，最容易写出死循环的算法。当然如果会应用的话，也会变成最简单的。

2️⃣ 学习中的侧重点

​	❍ 算法原理：不一定是数组有序的情况才能使用二分算法

​	❍ 模版（不要死记硬背-> 理解之后再记忆）

​		1.朴素的二分模版(easy but 局限) 

​		2.查找左边界的二分模版  

​		3.查找右边界的二分模版。（2，3 万能 但是细节多）

## 17.二分查找

**题目链接：****https://leetcode.cn/problems/binary-search/**

**题目描述：**

给定一个 `n` 个元素有序的（升序）整型数组 `nums` 和一个目标值 `target` ，写一个函数搜索 `nums` 中的 `target`，如果目标值存在返回下标，否则返回 `-1`。


**示例 1:**

```
输入: nums = [-1,0,3,5,9,12], target = 9
输出: 4
解释: 9 出现在 nums 中并且下标为 4
```

**示例 2:**

```
输入: nums = [-1,0,3,5,9,12], target = 2
输出: -1
解释: 2 不存在 nums 中因此返回 -1
```

**提示：**

1. 你可以假设 `nums` 中的所有元素是不重复的。
2. `n` 将在 `[1, 10000]`之间。
3. `nums` 的每个元素都将在 `[-9999, 9999]`之间。

**算法流程：**

1️⃣ 定义`left`，`right`指针，分别指向数组的左右区间。

2️⃣ 找到待查找区间的中间点`mid`，找到之后分三种情况讨论：

​	❍ `arr[mid] == target` 说明正好找到，返回 `mid` 的值；

​	❍ `arr[mid] > target` 说明`[mid,right]` 这段区间都是大于 `target`的，因此舍去右边区间，在左边`[left,mid - 1]`的区间继续查找，即让`right = mid - 1`，然后重复`2`过程

​	❍ `arr[mid] < target` 说明`[left,mid]`这段区间的值都是小于`target`的，因此舍去左边区间，在右边`[mid + 1, right]`区间继续查找，即让`left = mid + 1`，然后重复`2`过程；

3️⃣ 当`left` 与 `right` 错开时，说明整个区间都没有这个数，返回`-1`。
class Solution {
public:
    int search(vector<int>& nums, int target) {
        // 初始化 left 与 right 指针
        int left = 0, right = nums.size()-1;
        // 由于两个指针相交时，当前元素还未判断，因此需要取等号
        while(left <= right){
            // 先找到区间的中间元素
            int mid = left + (right - left)/2;//这种方式，可以避免left+right时引起的超出INT范围
            // 分三种情况讨论
            if(nums[mid] == target) return mid;
            else if(nums[mid] > target) right = mid - 1;
            else left = mid + 1;
        }
        // 如果程序走到这里，说明没有找到目标值，返回-1
        return -1;
    }
};
